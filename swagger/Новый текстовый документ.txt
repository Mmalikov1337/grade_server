swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /group:
    post:
      tags:
      - "group"
      summary: "create group"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "group"
      summary: "return group list"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /group/id:
    get:
      tags:
      - "group"
      summary: "return group with id"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
        tags:
        - "group"
        summary: "return group by id"
        description: "Multiple status values can be provided with comma separated strings"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "available"
            - "pending"
            - "sold"
            default: "available"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid status value"
        security:
        - petstore_auth:
          - "write:pets"
          - "read:pets"
    delete:
        tags:
        - "group"
        summary: "delete group by id"
        description: "Multiple status values can be provided with comma separated strings"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "available"
            - "pending"
            - "sold"
            default: "available"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid status value"
        security:
        - petstore_auth:
          - "write:pets"
          - "read:pets"
  /group/id/students:
    get:
      tags:
      - "group"
      summary: "return students "
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
  /group/subjects:
    get:
      tags:
      - "group"
      summary: "return list of GroupJubject"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
    post:
      tags:
      - "group"
      summary: "create groupSubject object"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
  /group/id/subjects:
    get:
      tags:
      - "group"
      summary: "return subjects of group by id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
  /subjects:
    get:
        tags:
        - "subjects"
        summary: "get subjects list"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    post:
        tags:
        - "subjects"
        summary: "create new subject"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /subjects/id:
    get:
        tags:
        - "subjects"
        summary: "get subjects by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    put:
        tags:
        - "subjects"
        summary: "edit subject by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    delete:
        tags:
        - "subjects"
        summary: "delete subject by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /students:
    get:
        tags:
        - "student"
        summary: "get students list"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    post:
        tags:
        - "student"
        summary: "create new student"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
            
  /student/id:
    get:
        tags:
        - "student"
        summary: "get student by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    put:
        tags:
        - "student"
        summary: "edit student by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    delete:
        tags:
        - "student"
        summary: "delete student by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /students/has=n:
    get:
        tags:
        - "student"
        summary: "get students, has grade = n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /students/more=n:
    get:
        tags:
        - "student"
        summary: "get students, has grade more then n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /students/less=n:
    get:
        tags:
        - "student"
        summary: "get students, has grade less then n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  
            
  /grades:
    get:
        tags:
        - "grades"
        summary: "get grades list"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    post:
        tags:
        - "grades"
        summary: "create new grades"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
            
  /grades/id:
    get:
        tags:
        - "grades"
        summary: "get grades by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    put:
        tags:
        - "grades"
        summary: "edit grades by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
    delete:
        tags:
        - "grades"
        summary: "delete grades by id"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /grades/has=n:
    get:
        tags:
        - "student"
        summary: "get grades = n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /grades/more=n:
    get:
        tags:
        - "student"
        summary: "get grades more then n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
  /grades/less=n:
    get:
        tags:
        - "student"
        summary: "get grades less then n"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: "Invalid tag value"
            
            
                      
            
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Group:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        petId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "placed"
          - "approved"
          - "delivered"
        complete:
          type: "boolean"
          default: false
      xml:
        name: "group"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"